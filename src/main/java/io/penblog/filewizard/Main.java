package io.penblog.filewizard;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import io.penblog.filewizard.helpers.SystemUtils;
import io.penblog.filewizard.services.ServiceContainer;
import io.penblog.filewizard.services.SettingService;
import io.penblog.filewizard.services.WebService;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.stage.Stage;
import jfxtras.styles.jmetro.JMetro;
import jfxtras.styles.jmetro.Style;
import io.penblog.filewizard.guis.dialog.CheckUpdateDialog;

import java.awt.*;
import java.io.InputStream;
import java.net.URL;
import java.util.Properties;


public class Main extends Application {

    @Override
    public void start(Stage stage) throws Exception {
        Properties properties = ServiceContainer.getProperties();
        SettingService settingService = ServiceContainer.getSettingService();
        WebService webService = ServiceContainer.getWebService();
        webService.setHostServices(properties, getHostServices());

        URL url = getClass().getClassLoader().getResource("views/main.fxml");
        FXMLLoader loader = new FXMLLoader(url);

        Parent root = loader.load();
        Scene scene = new Scene(root, 1200, 700);

        new JMetro(scene, Style.LIGHT);

        scene.getStylesheets().add("views/style.css");

        stage.setTitle("File Wizard");
        stage.setScene(scene);
        stage.setMinWidth(800);
        stage.setMinHeight(600);
        String iconPath = "images/icons8-magic-wand-67.png";
        InputStream s = getClass().getClassLoader().getResourceAsStream(iconPath);
        if (s != null) {
            Image icon = new Image(s);
            stage.getIcons().add(icon);

            if (SystemUtils.isMac()) {
                final Toolkit defaultToolkit = Toolkit.getDefaultToolkit();
                final java.awt.Image image = defaultToolkit.getImage(getClass()
                        .getClassLoader().getResource(iconPath));
                final Taskbar taskbar = Taskbar.getTaskbar();
                try {
                    //set icon for macOS (and other systems which do support this method)
                    taskbar.setIconImage(image);
                } catch (final UnsupportedOperationException e) {
                    System.out.println("The os does not support: 'taskbar.setIconImage'");
                } catch (final SecurityException e) {
                    System.out.println("There was a security exception for: 'taskbar.setIconImage'");
                }
            }
        }

        // check for update and show a dialog
        if (webService.hasUpdate()) {
            if (settingService.setting().isNotifyAvailableUpdate()) {
                CheckUpdateDialog checkUpdateDialog = new CheckUpdateDialog(properties, settingService, webService);
                checkUpdateDialog.show();
            }
        }

        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void stop() throws Exception {
        ServiceContainer.closeFileHandler();
        super.stop();
    }
}
